
Get rid of Wa_ast.Seq?

=======

fix wa_minimize_locals (loops)
=> a variable set outside of a loop is live to the end of the loop if
   used in the loop

fix liveness (exceptions)

=======

Simple improvements
===================

- Rebuild call-graph
  ==> simplification of br_table/if

- wasm_of_ocaml specific binary: options + linking
  choose entry point
  linker
  ==> wasm_of_ocaml hello.bc smart_rollup_core.wasm runtime.wasm \
                 --entry kernel_run
      ==> hello.s (for debugging)
      ==> hello.wasm

=======

Optimization phases
===================

- local with a special type for env?
  (more generally, no longer use a generic type for locals)

- optimization pass:
  use tee to nest expressions (optimized away later on)
  mutator (call / array/struct.set) flush mutable
  other expressions can float until they are used
  flush at end of blocks

- how can we avoid some casts. see what ocaml does for floats
  shall we typecheck the program?

- local optimizations: multiple cast on the same value

=======

Accurate compilation
====================

- exceptions using CPS transform
  ==> trampolining
  ==> check after external calls

========

Remarks
=======

- issue: binaryen does not support block input parameters
  https://github.com/WebAssembly/binaryen/issues/5047

- performance of casts (v8):
 --experimental-wasm-assume-ref-cast-succeeds
 --experimental-wasm-skip-null-checks
 --experimental-wasm-skip-bounds-checks

- we have a problem with large number of variable during the
  initialization phase, which could be an issue for the GC
  ==> keep initial globals but remove entries?
  ==> run-length encoded stack maps?

==================

Possible improvements
=====================

- directly generate wasm binary?
  ==> the most stable way to use Binaryen will always be to pass it a WebAssembly binary https://github.com/WebAssembly/binaryen/issues/5591#issuecomment-1476497338
  ==> can include DWARF debug information + other custom sections
  ==> we may not need to support both a wast and an .s ouput

==============================================

DOCS

GHC: https://gitlab.haskell.org/ghc/ghc/-/merge_requests/9204/diffs
     https://gitlab.haskell.org/ghc/ghc-wasm-meta

- C stubs to access the host functions
  https://reviews.llvm.org/D42520
  https://tezos.gitlab.io/alpha/smart_rollups.html#developing-wasm-kernels

- ABI
  https://github.com/WebAssembly/tool-conventions/

dart:
 https://github.com/dart-lang/sdk/blob/main/pkg/dart2wasm/lib/constants.dart

====================

BUILD PROCESS

dune exec -- js_of_ocaml --no-inline --pretty ~/tezos-noop-kernel/_build/default/src/hello.bc > /tmp/hello.s
clang-16  --no-standard-libraries --target=wasm32 /tmp/hello.s ../tezos-noop-kernel/_build/default/src/smart_rollup_core/smart_rollup_core.wasm ../tezos-noop-kernel/_build/default/src/runtime/runtime.wasm  -Wl,--no-entry -Wa,--no-type-check -o kernel.wasm

clang-16 -mexception-handling
wasm2wat --enable-exceptions  // --enable-all

dune exec -- js_of_ocaml --no-inline --pretty ~/tezos-noop-kernel/_build/default/src/hello.bc > /tmp/hello.wast
dune exec -- js_of_ocaml --no-inline --pretty ~/sources/tezos/_build/default/src/proto_alpha/bin_baker/main_baker_alpha.bc > /tmp/hello.wast

~/sources/binaryen/bin/wasm-opt --all-features -Oz /tmp/hello.wast -S -o -  | less
~/sources/wasm-gc-proposal/interpreter/wasm -d /tmp/hello.wast -o /tmp/hello.wat

===========================

GC proposal
===========

https://docs.google.com/document/d/1DklC3qVuOdLHSXB5UXghM_syCh-4cMinQ50ICiXnK3Q/edit#
https://github.com/WebAssembly/binaryen/blob/main/scripts/gen-s-parser.py
https://github.com/WebAssembly/gc/blob/main/interpreter/syntax/ast.ml

========

Curryfication improvements
==========================

- Each closure can hold several pointers (by copying the parent closure)
   caml_curry_n_1
- Curry function to perform a full apply when 3 arguments or less
   caml_curry_app_n_1
   caml_curry_app_n_2
   caml_curry_app_n_3
- Optimize caml_apply_n when overapplying or underapplying only a little
  Overapply:
    (f x1 ... xn') xn
    caml_apply2 (f x1 ... xn'') xn' xn
  Underapply:
    (fun x -> apply f x1 x2 ... xn x)
    (fun x y -> apply f x1 x2 ... xn x y)

    caml_apply_full_n_1
    caml_apply_full_n_2

==============================

Exception
=========

     res=f(...)
     if !res return res  (* Or jump to exception handler *)

     (No test necessary for tail calls)

     Store actual exception in a global variable

Trampoline
==========

     while(1) {
       res = f()
       if (res) return res
       if (exception pending) return res
       f = load_continuation()
     }

     if (depth < 40) f(x1, ..., xn)
     else { store (fun () -> f(x1, ..., xn)); return 0 }

     ===> create thunk functions

======================

Use one table by arity
===> function references / not supported by LLVM
===>
[wasm-gc] Optimize call_indirect type checks

Remove type check if declared signature exactly matches table
signature. Remove null check if the table is non-nullable.

=======================

Final types can be used for struct/array casts as well
==>
[wasm-gc] Final types

We add final types to wasm-gc.
- We introduce a `kWasmSubtypeFinalCode` as an alternative to
  `kWasmSubtypeCode`.
- Behind a flag, we interpret types behind this code as final, as well
  as types outside a subtype definition by default.
- For final types, type checks for call_indirect and ref.test etc. are
  reduced to simple type identity checks.

====================

We have unused globals (small constants / known closures)
===> eliminated by binaryen

===========================

Bindings:
   generate specialized JavaScript functions
      (for instance to create a literal object)
   optimize away unwrap(wrap(...))

===========================

Float unboxing: declare primitive type (or parse the runtime code to get the functions' parameter types?)

============================

Use WASI for system functions

NativeString ==> stringref const

============================

Js_of_ocaml fixes:
==> bound check optimization for float arrays
==> fix bound check for caml_bytes_getxx
==> strict equality
==> clamped array buffers
==> caml_unix_inet_addr_of_string
==> sys_random_seed
==> update to forcing
==> gc stats / caml_gc_get

===============================

Performance improvements:
- Refine exact calls: when there is a single function called, then we
  can call it directly.
- float arrays
- use unboxed primitives for int64/int32/nativeint

====================================================

Compilation process
===================

wasm_of_ocaml foo.bc ==> foo.js / foo.wasm
   - compile to a temp file (.wat file with -S option)
minify js runtime
share types between runtime files

===

TODO:

Implement runtime code
- numbers <-> string conversion
- file system access
- marshalling
- lexing/parsing
- weak pointer api
  ==> Use Javascript weak pointer implementation
- bigarrays
...

Test suite

Separate compilation (use wasm-merge for linking?)

Dune support

Optimizations
- more efficient JavaScript bindings
- unboxed float arrays
- try to eliminate some casts / boxing
- more direct calls when we known which function is called

=================

* array     (but arrays of float are boxed)
* backtrace (stubs)
  bigarray
  bigstring
  compare (mostly done)
* domain (stubs)
  dynlink
  effects
  format
  fs
* gc (stubs)
  graphics
* hash
  ieee_754 (mostly done)
  int64 (format)
  int (format)
  io
* jslib
  jslib_js_of_ocaml
  lexing
  marshal
  md5
  string
  nat
  obj
  parsing
* prng
  runtime_events
  stdlib
  str
* sync (stubs)
  sys
  toplevel
  unix (gettimeofday / time / gmtime)
  weak

* Array
* Atomic
  Bigarray
* Buffer
* Bytes
  Callback
  Dynlink
  Format (all but float formatting)
  Condition
  Digest
* Domain (stubs)
  Effect
  Ephemeron
  Float (mostly done)
* Gc (stubs)
* Hashtbl
  In_channel
* Int
* Int32
* Int64
* Lazy
  Lexing
  Marshal
* Mutex (stubs)
* Nativeint
* Obj (Obj.truncate and Obj.add_offset cannot be implemented)
  Out_channel
  Parsing
* Printexc (stubs)
* Random
* String
  Str
  Sys
  Unix
  Weak

- node bindings (I/Os)
- virtual filesystem
- toplevel

print uncaught exceptions

=========================

TODO

- number formatting / float parsing
  %[+ ]?#?.[0-9]+[eEfFgG]
  hexa
- caml_compare
- forks of brr / gen_js_api

- Should be able to compare/hash JavaScript strings (string refs)
- Objects (method calls)
