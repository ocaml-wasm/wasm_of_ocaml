
https://dfinity.org/grants/

========

- choose entry point
  linker
  ==> wasm_of_ocaml hello.bc smart_rollup_core.wasm runtime.wasm \
                 --entry kernel_run
      ==> hello.s (for debugging)
      ==> hello.wasm

=======

- remove unused local.tee (in Wa_minimize_locals)

- more efficient handling of type definitions

- local with a special type for env?
  (more generally, no longer use a generic type for locals)

- optimization pass:
  use tee to nest expressions (optimized away later on)
  mutator (call / array/struct.set) flush mutable
  other expressions can float until they are used
  flush at end of blocks

- optional tail recursion:
  detect the following:
    x = f(...)
    return x

- exceptions (if supported)
  ==> update Wa_structure

- partial application

- check integer overflows (integers are 31 bits only...)

- we need to keep track of ocaml int32 constants

- Partial application / over application
  apply1 really fast
  apply2 fast through indirect function
  other cases slow

- Spilling
  Naive spilling for a start?
  ==> How do we avoid spilling thousand of values?

- specialize: divide by zero / modulus / check array bound

- Rebuild call-graph
  ==> unnecessary blocks / simplification of br_table/if

- local optimizations:
  avoid store followed by unique load
  inline non-mutable expressions
  multiple cast on the same value

- issue: binaryen does not support block input parameters
  https://github.com/WebAssembly/binaryen/issues/5047

- performance of casts:
 --experimental-wasm-assume-ref-cast-succeeds
 --experimental-wasm-skip-null-checks

- directly generate wasm binary?

- GC: large constants should be generated at runtime

- how can we avoid some casts. see what ocaml does for floats
  shall we typecheck the program?

- keep initial globals but remove entries?

==============================================

GHC: https://gitlab.haskell.org/ghc/ghc/-/merge_requests/9204/diffs
     https://gitlab.haskell.org/ghc/ghc-wasm-meta

- C stubs to access the host functions
  https://reviews.llvm.org/D42520
  https://tezos.gitlab.io/alpha/smart_rollups.html#developing-wasm-kernels

- ABI
  https://github.com/WebAssembly/tool-conventions/

dart:
 https://github.com/dart-lang/sdk/blob/main/pkg/dart2wasm/lib/constants.dart

====================

BUILD PROCESS

dune exec -- js_of_ocaml --no-inline --pretty ~/tezos-noop-kernel/_build/default/src/hello.bc > /tmp/hello.s
clang-16  --no-standard-libraries --target=wasm32 /tmp/hello.s ../tezos-noop-kernel/_build/default/src/smart_rollup_core/smart_rollup_core.wasm ../tezos-noop-kernel/_build/default/src/runtime/runtime.wasm  -Wl,--no-entry -Wa,--no-type-check -o kernel.wasm

clang-16 -mexception-handling
wasm2wat --enable-exceptions  // --enable-all

===========================

GC documents
============

https://docs.google.com/document/d/1DklC3qVuOdLHSXB5UXghM_syCh-4cMinQ50ICiXnK3Q/edit#
https://github.com/WebAssembly/binaryen/blob/main/scripts/gen-s-parser.py
https://github.com/WebAssembly/gc/blob/main/interpreter/syntax/ast.ml

========

dune exec -- js_of_ocaml --no-inline --pretty ~/tezos-noop-kernel/_build/default/src/hello.bc > /tmp/hello.wast
dune exec -- js_of_ocaml --no-inline --pretty ~/sources/tezos/_build/default/src/proto_alpha/bin_baker/main_baker_alpha.bc > /tmp/hello.wast

~/sources/binaryen/bin/wasm-opt --all-features -Oz /tmp/hello.wast -S -o -  | less
~/sources/wasm-gc-proposal/interpreter/wasm -d /tmp/hello.wast -o /tmp/hello.wat

================



let call_n_m f x1 ... xn = ????




let call_n_1 env x = f (env @ x)
